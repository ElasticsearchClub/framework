// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elastic

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic(in *jlexer.Lexer, out *Stats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_all":
			easyjson3e1fa5ecDecode(in, &out.All)
		case "indices":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Indices = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Indices)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic(out *jwriter.Writer, in Stats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_all\":"
		out.RawString(prefix[1:])
		easyjson3e1fa5ecEncode(out, in.All)
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Indices {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic(l, v)
}
func easyjson3e1fa5ecDecode(in *jlexer.Lexer, out *struct {
	Primary map[string]interface{} `json:"primaries"`
	Total   map[string]interface{} `json:"total"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "primaries":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Primary = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					(out.Primary)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "total":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Total = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Total)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode(out *jwriter.Writer, in struct {
	Primary map[string]interface{} `json:"primaries"`
	Total   map[string]interface{} `json:"total"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"primaries\":"
		out.RawString(prefix[1:])
		if in.Primary == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Primary {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if m, ok := v5Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		if in.Total == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Total {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if m, ok := v6Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic1(in *jlexer.Lexer, out *ShardInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = string(in.String())
		case "shard_id":
			out.ShardID = string(in.String())
		case "primary":
			out.Primary = bool(in.Bool())
		case "state":
			out.State = string(in.String())
		case "unassigned_reason":
			out.UnassignedReason = string(in.String())
		case "docs_count":
			out.Docs = int64(in.Int64())
		case "store_size":
			out.Store = string(in.String())
		case "node_id":
			out.NodeID = string(in.String())
		case "node_name":
			out.NodeName = string(in.String())
		case "node_ip":
			out.NodeIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic1(out *jwriter.Writer, in ShardInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != "" {
		const prefix string = ",\"index\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Index))
	}
	if in.ShardID != "" {
		const prefix string = ",\"shard_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShardID))
	}
	if in.Primary {
		const prefix string = ",\"primary\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Primary))
	}
	if in.State != "" {
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.State))
	}
	if in.UnassignedReason != "" {
		const prefix string = ",\"unassigned_reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UnassignedReason))
	}
	if in.Docs != 0 {
		const prefix string = ",\"docs_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Docs))
	}
	if in.Store != "" {
		const prefix string = ",\"store_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Store))
	}
	if in.NodeID != "" {
		const prefix string = ",\"node_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeID))
	}
	if in.NodeName != "" {
		const prefix string = ",\"node_name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeName))
	}
	if in.NodeIP != "" {
		const prefix string = ",\"node_ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NodeIP))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShardInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShardInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShardInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShardInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic1(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic2(in *jlexer.Lexer, out *ReindexResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task":
			out.Task = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic2(out *jwriter.Writer, in ReindexResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"task\":"
		out.RawString(prefix[1:])
		out.String(string(in.Task))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReindexResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReindexResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReindexResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReindexResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic2(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic3(in *jlexer.Lexer, out *NodesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_nodes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.NodesCount = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 interface{}
					if m, ok := v7.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v7.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v7 = in.Interface()
					}
					(out.NodesCount)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "cluster_name":
			out.ClusterName = string(in.String())
		case "nodes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Nodes = make(map[string]NodesInfo)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 NodesInfo
					(v8).UnmarshalEasyJSON(in)
					(out.Nodes)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic3(out *jwriter.Writer, in NodesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_nodes\":"
		out.RawString(prefix[1:])
		if in.NodesCount == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.NodesCount {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				if m, ok := v9Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"cluster_name\":"
		out.RawString(prefix)
		out.String(string(in.ClusterName))
	}
	{
		const prefix string = ",\"nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Nodes {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				(v10Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic3(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic4(in *jlexer.Lexer, out *NodesInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.UnsafeString())
		case "version":
			out.Version = string(in.UnsafeString())
		case "http":
			easyjson3e1fa5ecDecode1(in, &out.Http)
		case "attributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Attributes = make(map[string]interface{})
				} else {
					out.Attributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 interface{}
					if m, ok := v11.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v11.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v11 = in.Interface()
					}
					(out.Attributes)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]string, 0, 4)
					} else {
						out.Roles = []string{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Roles = append(out.Roles, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "transport_address":
			out.TransportAddress = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "ip":
			out.Ip = string(in.String())
		case "build_flavor":
			out.BuildFlavor = string(in.String())
		case "build_type":
			out.BuildType = string(in.String())
		case "build_hash":
			out.BuildHash = string(in.String())
		case "total_indexing_buffer":
			out.TotalIndexingBuffer = int64(in.Int64())
		case "settings":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Settings = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 interface{}
					if m, ok := v13.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v13.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v13 = in.Interface()
					}
					(out.Settings)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "os":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Os = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 interface{}
					if m, ok := v14.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v14.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v14 = in.Interface()
					}
					(out.Os)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "process":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Process = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 interface{}
					if m, ok := v15.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v15.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v15 = in.Interface()
					}
					(out.Process)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "jvm":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Jvm = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 interface{}
					if m, ok := v16.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v16.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v16 = in.Interface()
					}
					(out.Jvm)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "thread_pool":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ThreadPool = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v17 interface{}
					if m, ok := v17.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v17.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v17 = in.Interface()
					}
					(out.ThreadPool)[key] = v17
					in.WantComma()
				}
				in.Delim('}')
			}
		case "transport":
			easyjson3e1fa5ecDecode2(in, &out.Transport)
		case "plugins":
			if in.IsNull() {
				in.Skip()
				out.Plugins = nil
			} else {
				in.Delim('[')
				if out.Plugins == nil {
					if !in.IsDelim(']') {
						out.Plugins = make([]interface{}, 0, 4)
					} else {
						out.Plugins = []interface{}{}
					}
				} else {
					out.Plugins = (out.Plugins)[:0]
				}
				for !in.IsDelim(']') {
					var v18 interface{}
					if m, ok := v18.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v18.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v18 = in.Interface()
					}
					out.Plugins = append(out.Plugins, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "modules":
			if in.IsNull() {
				in.Skip()
				out.Modules = nil
			} else {
				in.Delim('[')
				if out.Modules == nil {
					if !in.IsDelim(']') {
						out.Modules = make([]map[string]interface{}, 0, 8)
					} else {
						out.Modules = []map[string]interface{}{}
					}
				} else {
					out.Modules = (out.Modules)[:0]
				}
				for !in.IsDelim(']') {
					var v19 map[string]interface{}
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v19 = make(map[string]interface{})
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v20 interface{}
							if m, ok := v20.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v20.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v20 = in.Interface()
							}
							(v19)[key] = v20
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Modules = append(out.Modules, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingest":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Ingest = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 interface{}
					if m, ok := v21.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v21.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v21 = in.Interface()
					}
					(out.Ingest)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "aggregations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Aggregations = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 interface{}
					if m, ok := v22.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v22.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v22 = in.Interface()
					}
					(out.Aggregations)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic4(out *jwriter.Writer, in NodesInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if true {
		const prefix string = ",\"http\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode1(out, in.Http)
	}
	if len(in.Attributes) != 0 {
		const prefix string = ",\"attributes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Attributes {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				if m, ok := v23Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v23Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v23Value))
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.Roles {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"transport_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TransportAddress))
	}
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"build_flavor\":"
		out.RawString(prefix)
		out.String(string(in.BuildFlavor))
	}
	{
		const prefix string = ",\"build_type\":"
		out.RawString(prefix)
		out.String(string(in.BuildType))
	}
	{
		const prefix string = ",\"build_hash\":"
		out.RawString(prefix)
		out.String(string(in.BuildHash))
	}
	if in.TotalIndexingBuffer != 0 {
		const prefix string = ",\"total_indexing_buffer\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalIndexingBuffer))
	}
	{
		const prefix string = ",\"settings\":"
		out.RawString(prefix)
		if in.Settings == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v26First := true
			for v26Name, v26Value := range in.Settings {
				if v26First {
					v26First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v26Name))
				out.RawByte(':')
				if m, ok := v26Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v26Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v26Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"os\":"
		out.RawString(prefix)
		if in.Os == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.Os {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v27Name))
				out.RawByte(':')
				if m, ok := v27Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v27Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v27Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"process\":"
		out.RawString(prefix)
		if in.Process == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Process {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				if m, ok := v28Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v28Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v28Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"jvm\":"
		out.RawString(prefix)
		if in.Jvm == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v29First := true
			for v29Name, v29Value := range in.Jvm {
				if v29First {
					v29First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v29Name))
				out.RawByte(':')
				if m, ok := v29Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v29Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v29Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"thread_pool\":"
		out.RawString(prefix)
		if in.ThreadPool == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.ThreadPool {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				if m, ok := v30Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v30Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v30Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"transport\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncode2(out, in.Transport)
	}
	{
		const prefix string = ",\"plugins\":"
		out.RawString(prefix)
		if in.Plugins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Plugins {
				if v31 > 0 {
					out.RawByte(',')
				}
				if m, ok := v32.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v32.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v32))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"modules\":"
		out.RawString(prefix)
		if in.Modules == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Modules {
				if v33 > 0 {
					out.RawByte(',')
				}
				if v34 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v35First := true
					for v35Name, v35Value := range v34 {
						if v35First {
							v35First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v35Name))
						out.RawByte(':')
						if m, ok := v35Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v35Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v35Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingest\":"
		out.RawString(prefix)
		if in.Ingest == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v36First := true
			for v36Name, v36Value := range in.Ingest {
				if v36First {
					v36First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v36Name))
				out.RawByte(':')
				if m, ok := v36Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v36Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v36Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"aggregations\":"
		out.RawString(prefix)
		if in.Aggregations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v37First := true
			for v37Name, v37Value := range in.Aggregations {
				if v37First {
					v37First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v37Name))
				out.RawByte(':')
				if m, ok := v37Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v37Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v37Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodesInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodesInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodesInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodesInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic4(l, v)
}
func easyjson3e1fa5ecDecode2(in *jlexer.Lexer, out *struct {
	BoundAddress   []string `json:"bound_address"`
	PublishAddress string   `json:"publish_address"`
	Profiles       struct{} `json:"profiles"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bound_address":
			if in.IsNull() {
				in.Skip()
				out.BoundAddress = nil
			} else {
				in.Delim('[')
				if out.BoundAddress == nil {
					if !in.IsDelim(']') {
						out.BoundAddress = make([]string, 0, 4)
					} else {
						out.BoundAddress = []string{}
					}
				} else {
					out.BoundAddress = (out.BoundAddress)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.BoundAddress = append(out.BoundAddress, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "publish_address":
			out.PublishAddress = string(in.String())
		case "profiles":
			easyjson3e1fa5ecDecode3(in, &out.Profiles)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode2(out *jwriter.Writer, in struct {
	BoundAddress   []string `json:"bound_address"`
	PublishAddress string   `json:"publish_address"`
	Profiles       struct{} `json:"profiles"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bound_address\":"
		out.RawString(prefix[1:])
		if in.BoundAddress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.BoundAddress {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.String(string(v40))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"publish_address\":"
		out.RawString(prefix)
		out.String(string(in.PublishAddress))
	}
	{
		const prefix string = ",\"profiles\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncode3(out, in.Profiles)
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode3(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode3(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode1(in *jlexer.Lexer, out *struct {
	BoundAddress            []string `json:"bound_address"`
	PublishAddress          string   `json:"publish_address,omitempty"`
	MaxContentLengthInBytes int64    `json:"max_content_length_in_bytes,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bound_address":
			if in.IsNull() {
				in.Skip()
				out.BoundAddress = nil
			} else {
				in.Delim('[')
				if out.BoundAddress == nil {
					if !in.IsDelim(']') {
						out.BoundAddress = make([]string, 0, 4)
					} else {
						out.BoundAddress = []string{}
					}
				} else {
					out.BoundAddress = (out.BoundAddress)[:0]
				}
				for !in.IsDelim(']') {
					var v41 string
					v41 = string(in.String())
					out.BoundAddress = append(out.BoundAddress, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "publish_address":
			out.PublishAddress = string(in.String())
		case "max_content_length_in_bytes":
			out.MaxContentLengthInBytes = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode1(out *jwriter.Writer, in struct {
	BoundAddress            []string `json:"bound_address"`
	PublishAddress          string   `json:"publish_address,omitempty"`
	MaxContentLengthInBytes int64    `json:"max_content_length_in_bytes,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bound_address\":"
		out.RawString(prefix[1:])
		if in.BoundAddress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.BoundAddress {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if in.PublishAddress != "" {
		const prefix string = ",\"publish_address\":"
		out.RawString(prefix)
		out.String(string(in.PublishAddress))
	}
	if in.MaxContentLengthInBytes != 0 {
		const prefix string = ",\"max_content_length_in_bytes\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxContentLengthInBytes))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic5(in *jlexer.Lexer, out *NodeAvailable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Host":
			out.Host = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic5(out *jwriter.Writer, in NodeAvailable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeAvailable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeAvailable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeAvailable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeAvailable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic5(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic6(in *jlexer.Lexer, out *IndexStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_all":
			easyjson3e1fa5ecDecode4(in, &out.All)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic6(out *jwriter.Writer, in IndexStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_all\":"
		out.RawString(prefix[1:])
		easyjson3e1fa5ecEncode4(out, in.All)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic6(l, v)
}
func easyjson3e1fa5ecDecode4(in *jlexer.Lexer, out *struct {
	Primary struct {
		Store struct {
			SizeInBytes int64 `json:"size_in_bytes"`
		} `json:"store"`
		Segments struct {
			Count int `json:"count"`
		} `json:"segments"`
		Merges struct {
			Current int `json:"current"`
		} `json:"merges"`
	} `json:"primaries"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "primaries":
			easyjson3e1fa5ecDecode5(in, &out.Primary)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode4(out *jwriter.Writer, in struct {
	Primary struct {
		Store struct {
			SizeInBytes int64 `json:"size_in_bytes"`
		} `json:"store"`
		Segments struct {
			Count int `json:"count"`
		} `json:"segments"`
		Merges struct {
			Current int `json:"current"`
		} `json:"merges"`
	} `json:"primaries"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"primaries\":"
		out.RawString(prefix[1:])
		easyjson3e1fa5ecEncode5(out, in.Primary)
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode5(in *jlexer.Lexer, out *struct {
	Store struct {
		SizeInBytes int64 `json:"size_in_bytes"`
	} `json:"store"`
	Segments struct {
		Count int `json:"count"`
	} `json:"segments"`
	Merges struct {
		Current int `json:"current"`
	} `json:"merges"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "store":
			easyjson3e1fa5ecDecode6(in, &out.Store)
		case "segments":
			easyjson3e1fa5ecDecode7(in, &out.Segments)
		case "merges":
			easyjson3e1fa5ecDecode8(in, &out.Merges)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode5(out *jwriter.Writer, in struct {
	Store struct {
		SizeInBytes int64 `json:"size_in_bytes"`
	} `json:"store"`
	Segments struct {
		Count int `json:"count"`
	} `json:"segments"`
	Merges struct {
		Current int `json:"current"`
	} `json:"merges"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"store\":"
		out.RawString(prefix[1:])
		easyjson3e1fa5ecEncode6(out, in.Store)
	}
	{
		const prefix string = ",\"segments\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncode7(out, in.Segments)
	}
	{
		const prefix string = ",\"merges\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncode8(out, in.Merges)
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode8(in *jlexer.Lexer, out *struct {
	Current int `json:"current"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "current":
			out.Current = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode8(out *jwriter.Writer, in struct {
	Current int `json:"current"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"current\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Current))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode7(in *jlexer.Lexer, out *struct {
	Count int `json:"count"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode7(out *jwriter.Writer, in struct {
	Count int `json:"count"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode6(in *jlexer.Lexer, out *struct {
	SizeInBytes int64 `json:"size_in_bytes"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size_in_bytes":
			out.SizeInBytes = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode6(out *jwriter.Writer, in struct {
	SizeInBytes int64 `json:"size_in_bytes"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"size_in_bytes\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.SizeInBytes))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic7(in *jlexer.Lexer, out *IndexInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "health":
			out.Health = string(in.String())
		case "shards":
			out.Shards = int(in.Int())
		case "replicas":
			out.Replicas = int(in.Int())
		case "docs_count":
			out.DocsCount = int64(in.Int64())
		case "docs_deleted":
			out.DocsDeleted = int64(in.Int64())
		case "segments_count":
			out.SegmentsCount = int64(in.Int64())
		case "store_size":
			out.StoreSize = string(in.String())
		case "pri_store_size":
			out.PriStoreSize = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic7(out *jwriter.Writer, in IndexInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Health != "" {
		const prefix string = ",\"health\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Health))
	}
	if in.Shards != 0 {
		const prefix string = ",\"shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Shards))
	}
	if in.Replicas != 0 {
		const prefix string = ",\"replicas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Replicas))
	}
	if in.DocsCount != 0 {
		const prefix string = ",\"docs_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DocsCount))
	}
	if in.DocsDeleted != 0 {
		const prefix string = ",\"docs_deleted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.DocsDeleted))
	}
	if in.SegmentsCount != 0 {
		const prefix string = ",\"segments_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SegmentsCount))
	}
	if in.StoreSize != "" {
		const prefix string = ",\"store_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreSize))
	}
	if in.PriStoreSize != "" {
		const prefix string = ",\"pri_store_size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PriStoreSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IndexInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IndexInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IndexInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IndexInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic7(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic8(in *jlexer.Lexer, out *ErrorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(struct {
						Type   string `json:"type,omitempty"`
						Reason string `json:"reason,omitempty"`
					})
				}
				easyjson3e1fa5ecDecode9(in, out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic8(out *jwriter.Writer, in ErrorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode9(out, *in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic8(l, v)
}
func easyjson3e1fa5ecDecode9(in *jlexer.Lexer, out *struct {
	Type   string `json:"type,omitempty"`
	Reason string `json:"reason,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode9(out *jwriter.Writer, in struct {
	Type   string `json:"type,omitempty"`
	Reason string `json:"reason,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic9(in *jlexer.Lexer, out *ElasticsearchMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Config":
			if in.IsNull() {
				in.Skip()
				out.Config = nil
			} else {
				if out.Config == nil {
					out.Config = new(ElasticsearchConfig)
				}
				(*out.Config).UnmarshalEasyJSON(in)
			}
		case "ClusterState":
			if in.IsNull() {
				in.Skip()
				out.ClusterState = nil
			} else {
				if out.ClusterState == nil {
					out.ClusterState = new(ClusterState)
				}
				easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic10(in, out.ClusterState)
			}
		case "NodesTopologyVersion":
			out.NodesTopologyVersion = int(in.Int())
		case "Nodes":
			if in.IsNull() {
				in.Skip()
				out.Nodes = nil
			} else {
				if out.Nodes == nil {
					out.Nodes = new(map[string]NodesInfo)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Nodes = make(map[string]NodesInfo)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v44 NodesInfo
						(v44).UnmarshalEasyJSON(in)
						(*out.Nodes)[key] = v44
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "Indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				if out.Indices == nil {
					out.Indices = new(map[string]IndexInfo)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Indices = make(map[string]IndexInfo)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v45 IndexInfo
						(v45).UnmarshalEasyJSON(in)
						(*out.Indices)[key] = v45
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "PrimaryShards":
			if in.IsNull() {
				in.Skip()
				out.PrimaryShards = nil
			} else {
				if out.PrimaryShards == nil {
					out.PrimaryShards = new(map[string]map[int]ShardInfo)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.PrimaryShards = make(map[string]map[int]ShardInfo)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v46 map[int]ShardInfo
						if in.IsNull() {
							in.Skip()
						} else {
							in.Delim('{')
							v46 = make(map[int]ShardInfo)
							for !in.IsDelim('}') {
								key := int(in.IntStr())
								in.WantColon()
								var v47 ShardInfo
								(v47).UnmarshalEasyJSON(in)
								(v46)[key] = v47
								in.WantComma()
							}
							in.Delim('}')
						}
						(*out.PrimaryShards)[key] = v46
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "Aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				if out.Aliases == nil {
					out.Aliases = new(map[string]AliasInfo)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('{')
					*out.Aliases = make(map[string]AliasInfo)
					for !in.IsDelim('}') {
						key := string(in.String())
						in.WantColon()
						var v48 AliasInfo
						(v48).UnmarshalEasyJSON(in)
						(*out.Aliases)[key] = v48
						in.WantComma()
					}
					in.Delim('}')
				}
			}
		case "Health":
			if in.IsNull() {
				in.Skip()
				out.Health = nil
			} else {
				if out.Health == nil {
					out.Health = new(ClusterHealth)
				}
				easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic11(in, out.Health)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic9(out *jwriter.Writer, in ElasticsearchMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Config\":"
		out.RawString(prefix[1:])
		if in.Config == nil {
			out.RawString("null")
		} else {
			(*in.Config).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"ClusterState\":"
		out.RawString(prefix)
		if in.ClusterState == nil {
			out.RawString("null")
		} else {
			easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic10(out, *in.ClusterState)
		}
	}
	{
		const prefix string = ",\"NodesTopologyVersion\":"
		out.RawString(prefix)
		out.Int(int(in.NodesTopologyVersion))
	}
	{
		const prefix string = ",\"Nodes\":"
		out.RawString(prefix)
		if in.Nodes == nil {
			out.RawString("null")
		} else {
			if *in.Nodes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v49First := true
				for v49Name, v49Value := range *in.Nodes {
					if v49First {
						v49First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v49Name))
					out.RawByte(':')
					(v49Value).MarshalEasyJSON(out)
				}
				out.RawByte('}')
			}
		}
	}
	{
		const prefix string = ",\"Indices\":"
		out.RawString(prefix)
		if in.Indices == nil {
			out.RawString("null")
		} else {
			if *in.Indices == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v50First := true
				for v50Name, v50Value := range *in.Indices {
					if v50First {
						v50First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v50Name))
					out.RawByte(':')
					(v50Value).MarshalEasyJSON(out)
				}
				out.RawByte('}')
			}
		}
	}
	{
		const prefix string = ",\"PrimaryShards\":"
		out.RawString(prefix)
		if in.PrimaryShards == nil {
			out.RawString("null")
		} else {
			if *in.PrimaryShards == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v51First := true
				for v51Name, v51Value := range *in.PrimaryShards {
					if v51First {
						v51First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v51Name))
					out.RawByte(':')
					if v51Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
						out.RawString(`null`)
					} else {
						out.RawByte('{')
						v52First := true
						for v52Name, v52Value := range v51Value {
							if v52First {
								v52First = false
							} else {
								out.RawByte(',')
							}
							out.IntStr(int(v52Name))
							out.RawByte(':')
							(v52Value).MarshalEasyJSON(out)
						}
						out.RawByte('}')
					}
				}
				out.RawByte('}')
			}
		}
	}
	{
		const prefix string = ",\"Aliases\":"
		out.RawString(prefix)
		if in.Aliases == nil {
			out.RawString("null")
		} else {
			if *in.Aliases == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
				out.RawString(`null`)
			} else {
				out.RawByte('{')
				v53First := true
				for v53Name, v53Value := range *in.Aliases {
					if v53First {
						v53First = false
					} else {
						out.RawByte(',')
					}
					out.String(string(v53Name))
					out.RawByte(':')
					(v53Value).MarshalEasyJSON(out)
				}
				out.RawByte('}')
			}
		}
	}
	{
		const prefix string = ",\"Health\":"
		out.RawString(prefix)
		if in.Health == nil {
			out.RawString("null")
		} else {
			easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic11(out, *in.Health)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElasticsearchMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElasticsearchMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElasticsearchMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElasticsearchMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic9(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic11(in *jlexer.Lexer, out *ClusterHealth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cluster_name":
			out.Name = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "timed_out":
			out.TimedOut = bool(in.Bool())
		case "number_of_nodes":
			out.NumberOfNodes = int(in.Int())
		case "number_of_data_nodes":
			out.NumberOf_data_nodes = int(in.Int())
		case "active_primary_shards":
			out.ActivePrimary_shards = int(in.Int())
		case "active_shards":
			out.ActiveShards = int(in.Int())
		case "relocating_shards":
			out.RelocatingShards = int(in.Int())
		case "initializing_shards":
			out.InitializingShards = int(in.Int())
		case "unassigned_shards":
			out.UnassignedShards = int(in.Int())
		case "delayed_unassigned_shards":
			out.DelayedUnassignedShards = int(in.Int())
		case "number_of_pending_tasks":
			out.NumberOfPendingTasks = int(in.Int())
		case "number_of_in_flight_fetch":
			out.NumberOfInFlightFetch = int(in.Int())
		case "task_max_waiting_in_queue_millis":
			out.TaskMaxWaitingInQueueMillis = float64(in.Float64())
		case "active_shards_percent_as_number":
			out.ActiveShardsPercentAsNumber = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic11(out *jwriter.Writer, in ClusterHealth) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cluster_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"timed_out\":"
		out.RawString(prefix)
		out.Bool(bool(in.TimedOut))
	}
	{
		const prefix string = ",\"number_of_nodes\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfNodes))
	}
	{
		const prefix string = ",\"number_of_data_nodes\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOf_data_nodes))
	}
	{
		const prefix string = ",\"active_primary_shards\":"
		out.RawString(prefix)
		out.Int(int(in.ActivePrimary_shards))
	}
	{
		const prefix string = ",\"active_shards\":"
		out.RawString(prefix)
		out.Int(int(in.ActiveShards))
	}
	{
		const prefix string = ",\"relocating_shards\":"
		out.RawString(prefix)
		out.Int(int(in.RelocatingShards))
	}
	{
		const prefix string = ",\"initializing_shards\":"
		out.RawString(prefix)
		out.Int(int(in.InitializingShards))
	}
	{
		const prefix string = ",\"unassigned_shards\":"
		out.RawString(prefix)
		out.Int(int(in.UnassignedShards))
	}
	{
		const prefix string = ",\"delayed_unassigned_shards\":"
		out.RawString(prefix)
		out.Int(int(in.DelayedUnassignedShards))
	}
	{
		const prefix string = ",\"number_of_pending_tasks\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfPendingTasks))
	}
	{
		const prefix string = ",\"number_of_in_flight_fetch\":"
		out.RawString(prefix)
		out.Int(int(in.NumberOfInFlightFetch))
	}
	{
		const prefix string = ",\"task_max_waiting_in_queue_millis\":"
		out.RawString(prefix)
		out.Float64(float64(in.TaskMaxWaitingInQueueMillis))
	}
	{
		const prefix string = ",\"active_shards_percent_as_number\":"
		out.RawString(prefix)
		out.Float64(float64(in.ActiveShardsPercentAsNumber))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic10(in *jlexer.Lexer, out *ClusterState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cluster_name":
			out.ClusterName = string(in.String())
		case "version":
			out.Version = int64(in.Int64())
		case "state_uuid":
			out.StateUUID = string(in.String())
		case "master_node":
			out.MasterNode = string(in.String())
		case "routing_table":
			if in.IsNull() {
				in.Skip()
				out.RoutingTable = nil
			} else {
				if out.RoutingTable == nil {
					out.RoutingTable = new(ClusterRoutingTable)
				}
				easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic12(in, out.RoutingTable)
			}
		case "compressed_size_in_bytes":
			out.CompressedSizeInBytes = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic10(out *jwriter.Writer, in ClusterState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cluster_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClusterName))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int64(int64(in.Version))
	}
	{
		const prefix string = ",\"state_uuid\":"
		out.RawString(prefix)
		out.String(string(in.StateUUID))
	}
	{
		const prefix string = ",\"master_node\":"
		out.RawString(prefix)
		out.String(string(in.MasterNode))
	}
	if in.RoutingTable != nil {
		const prefix string = ",\"routing_table\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic12(out, *in.RoutingTable)
	}
	{
		const prefix string = ",\"compressed_size_in_bytes\":"
		out.RawString(prefix)
		out.Int(int(in.CompressedSizeInBytes))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic12(in *jlexer.Lexer, out *ClusterRoutingTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "indices":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Indices = make(map[string]struct {
					Shards map[string][]struct {
						State          string      `json:"state"`
						Primary        bool        `json:"primary"`
						Node           string      `json:"node"`
						RelocatingNode interface{} `json:"relocating_node,omitempty"`
						Shard          int         `json:"shard"`
						Index          string      `json:"index"`
						Version        int         `json:"version"`
						RecoverySource *struct {
							Type string `json:"type"`
						} `json:"recovery_source,omitempty"`
						UnassignedInfo *struct {
							Reason           string    `json:"reason"`
							At               time.Time `json:"at"`
							Delayed          bool      `json:"delayed"`
							AllocationStatus string    `json:"allocation_status"`
						} `json:"unassigned_info,omitempty"`
						AllocationId *struct {
							Id string `json:"id"`
						} `json:"allocation_id,omitempty"`
					} `json:"shards"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 struct {
						Shards map[string][]struct {
							State          string      `json:"state"`
							Primary        bool        `json:"primary"`
							Node           string      `json:"node"`
							RelocatingNode interface{} `json:"relocating_node,omitempty"`
							Shard          int         `json:"shard"`
							Index          string      `json:"index"`
							Version        int         `json:"version"`
							RecoverySource *struct {
								Type string `json:"type"`
							} `json:"recovery_source,omitempty"`
							UnassignedInfo *struct {
								Reason           string    `json:"reason"`
								At               time.Time `json:"at"`
								Delayed          bool      `json:"delayed"`
								AllocationStatus string    `json:"allocation_status"`
							} `json:"unassigned_info,omitempty"`
							AllocationId *struct {
								Id string `json:"id"`
							} `json:"allocation_id,omitempty"`
						} `json:"shards"`
					}
					easyjson3e1fa5ecDecode10(in, &v54)
					(out.Indices)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic12(out *jwriter.Writer, in ClusterRoutingTable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix[1:])
		if in.Indices == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.Indices {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				easyjson3e1fa5ecEncode10(out, v55Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode10(in *jlexer.Lexer, out *struct {
	Shards map[string][]struct {
		State          string      `json:"state"`
		Primary        bool        `json:"primary"`
		Node           string      `json:"node"`
		RelocatingNode interface{} `json:"relocating_node,omitempty"`
		Shard          int         `json:"shard"`
		Index          string      `json:"index"`
		Version        int         `json:"version"`
		RecoverySource *struct {
			Type string `json:"type"`
		} `json:"recovery_source,omitempty"`
		UnassignedInfo *struct {
			Reason           string    `json:"reason"`
			At               time.Time `json:"at"`
			Delayed          bool      `json:"delayed"`
			AllocationStatus string    `json:"allocation_status"`
		} `json:"unassigned_info,omitempty"`
		AllocationId *struct {
			Id string `json:"id"`
		} `json:"allocation_id,omitempty"`
	} `json:"shards"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shards":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Shards = make(map[string][]struct {
					State          string      `json:"state"`
					Primary        bool        `json:"primary"`
					Node           string      `json:"node"`
					RelocatingNode interface{} `json:"relocating_node,omitempty"`
					Shard          int         `json:"shard"`
					Index          string      `json:"index"`
					Version        int         `json:"version"`
					RecoverySource *struct {
						Type string `json:"type"`
					} `json:"recovery_source,omitempty"`
					UnassignedInfo *struct {
						Reason           string    `json:"reason"`
						At               time.Time `json:"at"`
						Delayed          bool      `json:"delayed"`
						AllocationStatus string    `json:"allocation_status"`
					} `json:"unassigned_info,omitempty"`
					AllocationId *struct {
						Id string `json:"id"`
					} `json:"allocation_id,omitempty"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v56 []struct {
						State          string      `json:"state"`
						Primary        bool        `json:"primary"`
						Node           string      `json:"node"`
						RelocatingNode interface{} `json:"relocating_node,omitempty"`
						Shard          int         `json:"shard"`
						Index          string      `json:"index"`
						Version        int         `json:"version"`
						RecoverySource *struct {
							Type string `json:"type"`
						} `json:"recovery_source,omitempty"`
						UnassignedInfo *struct {
							Reason           string    `json:"reason"`
							At               time.Time `json:"at"`
							Delayed          bool      `json:"delayed"`
							AllocationStatus string    `json:"allocation_status"`
						} `json:"unassigned_info,omitempty"`
						AllocationId *struct {
							Id string `json:"id"`
						} `json:"allocation_id,omitempty"`
					}
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						in.Delim('[')
						if v56 == nil {
							if !in.IsDelim(']') {
								v56 = make([]struct {
									State          string      `json:"state"`
									Primary        bool        `json:"primary"`
									Node           string      `json:"node"`
									RelocatingNode interface{} `json:"relocating_node,omitempty"`
									Shard          int         `json:"shard"`
									Index          string      `json:"index"`
									Version        int         `json:"version"`
									RecoverySource *struct {
										Type string `json:"type"`
									} `json:"recovery_source,omitempty"`
									UnassignedInfo *struct {
										Reason           string    `json:"reason"`
										At               time.Time `json:"at"`
										Delayed          bool      `json:"delayed"`
										AllocationStatus string    `json:"allocation_status"`
									} `json:"unassigned_info,omitempty"`
									AllocationId *struct {
										Id string `json:"id"`
									} `json:"allocation_id,omitempty"`
								}, 0, 0)
							} else {
								v56 = []struct {
									State          string      `json:"state"`
									Primary        bool        `json:"primary"`
									Node           string      `json:"node"`
									RelocatingNode interface{} `json:"relocating_node,omitempty"`
									Shard          int         `json:"shard"`
									Index          string      `json:"index"`
									Version        int         `json:"version"`
									RecoverySource *struct {
										Type string `json:"type"`
									} `json:"recovery_source,omitempty"`
									UnassignedInfo *struct {
										Reason           string    `json:"reason"`
										At               time.Time `json:"at"`
										Delayed          bool      `json:"delayed"`
										AllocationStatus string    `json:"allocation_status"`
									} `json:"unassigned_info,omitempty"`
									AllocationId *struct {
										Id string `json:"id"`
									} `json:"allocation_id,omitempty"`
								}{}
							}
						} else {
							v56 = (v56)[:0]
						}
						for !in.IsDelim(']') {
							var v57 struct {
								State          string      `json:"state"`
								Primary        bool        `json:"primary"`
								Node           string      `json:"node"`
								RelocatingNode interface{} `json:"relocating_node,omitempty"`
								Shard          int         `json:"shard"`
								Index          string      `json:"index"`
								Version        int         `json:"version"`
								RecoverySource *struct {
									Type string `json:"type"`
								} `json:"recovery_source,omitempty"`
								UnassignedInfo *struct {
									Reason           string    `json:"reason"`
									At               time.Time `json:"at"`
									Delayed          bool      `json:"delayed"`
									AllocationStatus string    `json:"allocation_status"`
								} `json:"unassigned_info,omitempty"`
								AllocationId *struct {
									Id string `json:"id"`
								} `json:"allocation_id,omitempty"`
							}
							easyjson3e1fa5ecDecode11(in, &v57)
							v56 = append(v56, v57)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Shards)[key] = v56
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode10(out *jwriter.Writer, in struct {
	Shards map[string][]struct {
		State          string      `json:"state"`
		Primary        bool        `json:"primary"`
		Node           string      `json:"node"`
		RelocatingNode interface{} `json:"relocating_node,omitempty"`
		Shard          int         `json:"shard"`
		Index          string      `json:"index"`
		Version        int         `json:"version"`
		RecoverySource *struct {
			Type string `json:"type"`
		} `json:"recovery_source,omitempty"`
		UnassignedInfo *struct {
			Reason           string    `json:"reason"`
			At               time.Time `json:"at"`
			Delayed          bool      `json:"delayed"`
			AllocationStatus string    `json:"allocation_status"`
		} `json:"unassigned_info,omitempty"`
		AllocationId *struct {
			Id string `json:"id"`
		} `json:"allocation_id,omitempty"`
	} `json:"shards"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"shards\":"
		out.RawString(prefix[1:])
		if in.Shards == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.Shards {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v58Name))
				out.RawByte(':')
				if v58Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v59, v60 := range v58Value {
						if v59 > 0 {
							out.RawByte(',')
						}
						easyjson3e1fa5ecEncode11(out, v60)
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode11(in *jlexer.Lexer, out *struct {
	State          string      `json:"state"`
	Primary        bool        `json:"primary"`
	Node           string      `json:"node"`
	RelocatingNode interface{} `json:"relocating_node,omitempty"`
	Shard          int         `json:"shard"`
	Index          string      `json:"index"`
	Version        int         `json:"version"`
	RecoverySource *struct {
		Type string `json:"type"`
	} `json:"recovery_source,omitempty"`
	UnassignedInfo *struct {
		Reason           string    `json:"reason"`
		At               time.Time `json:"at"`
		Delayed          bool      `json:"delayed"`
		AllocationStatus string    `json:"allocation_status"`
	} `json:"unassigned_info,omitempty"`
	AllocationId *struct {
		Id string `json:"id"`
	} `json:"allocation_id,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = string(in.String())
		case "primary":
			out.Primary = bool(in.Bool())
		case "node":
			out.Node = string(in.String())
		case "relocating_node":
			if m, ok := out.RelocatingNode.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.RelocatingNode.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.RelocatingNode = in.Interface()
			}
		case "shard":
			out.Shard = int(in.Int())
		case "index":
			out.Index = string(in.String())
		case "version":
			out.Version = int(in.Int())
		case "recovery_source":
			if in.IsNull() {
				in.Skip()
				out.RecoverySource = nil
			} else {
				if out.RecoverySource == nil {
					out.RecoverySource = new(struct {
						Type string `json:"type"`
					})
				}
				easyjson3e1fa5ecDecode12(in, out.RecoverySource)
			}
		case "unassigned_info":
			if in.IsNull() {
				in.Skip()
				out.UnassignedInfo = nil
			} else {
				if out.UnassignedInfo == nil {
					out.UnassignedInfo = new(struct {
						Reason           string    `json:"reason"`
						At               time.Time `json:"at"`
						Delayed          bool      `json:"delayed"`
						AllocationStatus string    `json:"allocation_status"`
					})
				}
				easyjson3e1fa5ecDecode13(in, out.UnassignedInfo)
			}
		case "allocation_id":
			if in.IsNull() {
				in.Skip()
				out.AllocationId = nil
			} else {
				if out.AllocationId == nil {
					out.AllocationId = new(struct {
						Id string `json:"id"`
					})
				}
				easyjson3e1fa5ecDecode14(in, out.AllocationId)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode11(out *jwriter.Writer, in struct {
	State          string      `json:"state"`
	Primary        bool        `json:"primary"`
	Node           string      `json:"node"`
	RelocatingNode interface{} `json:"relocating_node,omitempty"`
	Shard          int         `json:"shard"`
	Index          string      `json:"index"`
	Version        int         `json:"version"`
	RecoverySource *struct {
		Type string `json:"type"`
	} `json:"recovery_source,omitempty"`
	UnassignedInfo *struct {
		Reason           string    `json:"reason"`
		At               time.Time `json:"at"`
		Delayed          bool      `json:"delayed"`
		AllocationStatus string    `json:"allocation_status"`
	} `json:"unassigned_info,omitempty"`
	AllocationId *struct {
		Id string `json:"id"`
	} `json:"allocation_id,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix[1:])
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"primary\":"
		out.RawString(prefix)
		out.Bool(bool(in.Primary))
	}
	{
		const prefix string = ",\"node\":"
		out.RawString(prefix)
		out.String(string(in.Node))
	}
	if in.RelocatingNode != nil {
		const prefix string = ",\"relocating_node\":"
		out.RawString(prefix)
		if m, ok := in.RelocatingNode.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.RelocatingNode.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.RelocatingNode))
		}
	}
	{
		const prefix string = ",\"shard\":"
		out.RawString(prefix)
		out.Int(int(in.Shard))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.Int(int(in.Version))
	}
	if in.RecoverySource != nil {
		const prefix string = ",\"recovery_source\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncode12(out, *in.RecoverySource)
	}
	if in.UnassignedInfo != nil {
		const prefix string = ",\"unassigned_info\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncode13(out, *in.UnassignedInfo)
	}
	if in.AllocationId != nil {
		const prefix string = ",\"allocation_id\":"
		out.RawString(prefix)
		easyjson3e1fa5ecEncode14(out, *in.AllocationId)
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode14(in *jlexer.Lexer, out *struct {
	Id string `json:"id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode14(out *jwriter.Writer, in struct {
	Id string `json:"id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode13(in *jlexer.Lexer, out *struct {
	Reason           string    `json:"reason"`
	At               time.Time `json:"at"`
	Delayed          bool      `json:"delayed"`
	AllocationStatus string    `json:"allocation_status"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			out.Reason = string(in.String())
		case "at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.At).UnmarshalJSON(data))
			}
		case "delayed":
			out.Delayed = bool(in.Bool())
		case "allocation_status":
			out.AllocationStatus = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode13(out *jwriter.Writer, in struct {
	Reason           string    `json:"reason"`
	At               time.Time `json:"at"`
	Delayed          bool      `json:"delayed"`
	AllocationStatus string    `json:"allocation_status"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix[1:])
		out.String(string(in.Reason))
	}
	{
		const prefix string = ",\"at\":"
		out.RawString(prefix)
		out.Raw((in.At).MarshalJSON())
	}
	{
		const prefix string = ",\"delayed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Delayed))
	}
	{
		const prefix string = ",\"allocation_status\":"
		out.RawString(prefix)
		out.String(string(in.AllocationStatus))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode12(in *jlexer.Lexer, out *struct {
	Type string `json:"type"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode12(out *jwriter.Writer, in struct {
	Type string `json:"type"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic13(in *jlexer.Lexer, out *ElasticsearchConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "monitored":
			out.Monitored = bool(in.Bool())
		case "http_proxy":
			out.HttpProxy = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		case "endpoints":
			if in.IsNull() {
				in.Skip()
				out.Endpoints = nil
			} else {
				in.Delim('[')
				if out.Endpoints == nil {
					if !in.IsDelim(']') {
						out.Endpoints = make([]string, 0, 4)
					} else {
						out.Endpoints = []string{}
					}
				} else {
					out.Endpoints = (out.Endpoints)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.Endpoints = append(out.Endpoints, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "version":
			out.Version = string(in.String())
		case "client_mode":
			out.ClientMode = string(in.String())
		case "request_timeout":
			out.RequestTimeout = int(in.Int())
		case "basic_auth":
			if in.IsNull() {
				in.Skip()
				out.BasicAuth = nil
			} else {
				if out.BasicAuth == nil {
					out.BasicAuth = new(struct {
						Username string `json:"username,omitempty" config:"username" elastic_mapping:"username:{type:keyword}"`
						Password string `json:"password,omitempty" config:"password" elastic_mapping:"password:{type:keyword}"`
					})
				}
				easyjson3e1fa5ecDecode15(in, out.BasicAuth)
			}
		case "traffic_control":
			if in.IsNull() {
				in.Skip()
				out.TrafficControl = nil
			} else {
				if out.TrafficControl == nil {
					out.TrafficControl = new(struct {
						MaxConnectionPerNode int `json:"max_connection_per_node,omitempty" config:"max_connection_per_node" elastic_mapping:"max_connection_per_node:{type:keyword}"`
						MaxWaitTimeInMs      int `json:"max_wait_time_in_ms,omitempty" config:"max_wait_time_in_ms" elastic_mapping:"max_wait_time_in_ms:{type:keyword}"`
						MaxBytesPerNode      int `json:"max_bytes_per_node,omitempty" config:"max_bytes_per_node" elastic_mapping:"max_bytes_per_node:{type:keyword}"`
						MaxQpsPerNode        int `json:"max_qps_per_node,omitempty" config:"max_qps_per_node" elastic_mapping:"max_qps_per_node:{type:keyword}"`
					})
				}
				easyjson3e1fa5ecDecode16(in, out.TrafficControl)
			}
		case "discovery":
			easyjson3e1fa5ecDecode17(in, &out.Discovery)
		case "order":
			out.Order = int(in.Int())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "updated":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Updated).UnmarshalJSON(data))
			}
		case "schema":
			out.Schema = string(in.String())
		case "host":
			out.Host = string(in.String())
		case "hosts":
			if in.IsNull() {
				in.Skip()
				out.Hosts = nil
			} else {
				in.Delim('[')
				if out.Hosts == nil {
					if !in.IsDelim(']') {
						out.Hosts = make([]string, 0, 4)
					} else {
						out.Hosts = []string{}
					}
				} else {
					out.Hosts = (out.Hosts)[:0]
				}
				for !in.IsDelim(']') {
					var v62 string
					v62 = string(in.String())
					out.Hosts = append(out.Hosts, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic13(out *jwriter.Writer, in ElasticsearchConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Source != "" {
		const prefix string = ",\"source\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	if in.ID != "" {
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Enabled))
	}
	if in.Monitored {
		const prefix string = ",\"monitored\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Monitored))
	}
	if in.HttpProxy != "" {
		const prefix string = ",\"http_proxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HttpProxy))
	}
	if in.Endpoint != "" {
		const prefix string = ",\"endpoint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Endpoint))
	}
	if len(in.Endpoints) != 0 {
		const prefix string = ",\"endpoints\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v63, v64 := range in.Endpoints {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.String(string(v64))
			}
			out.RawByte(']')
		}
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.ClientMode != "" {
		const prefix string = ",\"client_mode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClientMode))
	}
	if in.RequestTimeout != 0 {
		const prefix string = ",\"request_timeout\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RequestTimeout))
	}
	if in.BasicAuth != nil {
		const prefix string = ",\"basic_auth\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode15(out, *in.BasicAuth)
	}
	if in.TrafficControl != nil {
		const prefix string = ",\"traffic_control\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode16(out, *in.TrafficControl)
	}
	if true {
		const prefix string = ",\"discovery\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode17(out, in.Discovery)
	}
	if in.Order != 0 {
		const prefix string = ",\"order\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Order))
	}
	if true {
		const prefix string = ",\"created\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Created).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Updated).MarshalJSON())
	}
	if in.Schema != "" {
		const prefix string = ",\"schema\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Schema))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	if len(in.Hosts) != 0 {
		const prefix string = ",\"hosts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.Hosts {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.String(string(v66))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ElasticsearchConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ElasticsearchConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ElasticsearchConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ElasticsearchConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic13(l, v)
}
func easyjson3e1fa5ecDecode17(in *jlexer.Lexer, out *struct {
	Enabled bool     `json:"enabled,omitempty" config:"enabled"`
	Modules []string `json:"module,omitempty" config:"module"`
	Refresh struct {
		Enabled  bool   `json:"enabled,omitempty" config:"enabled"`
		Interval string `json:"interval,omitempty" config:"interval"`
	} `json:"refresh,omitempty" config:"refresh"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "module":
			if in.IsNull() {
				in.Skip()
				out.Modules = nil
			} else {
				in.Delim('[')
				if out.Modules == nil {
					if !in.IsDelim(']') {
						out.Modules = make([]string, 0, 4)
					} else {
						out.Modules = []string{}
					}
				} else {
					out.Modules = (out.Modules)[:0]
				}
				for !in.IsDelim(']') {
					var v67 string
					v67 = string(in.String())
					out.Modules = append(out.Modules, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "refresh":
			easyjson3e1fa5ecDecode18(in, &out.Refresh)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode17(out *jwriter.Writer, in struct {
	Enabled bool     `json:"enabled,omitempty" config:"enabled"`
	Modules []string `json:"module,omitempty" config:"module"`
	Refresh struct {
		Enabled  bool   `json:"enabled,omitempty" config:"enabled"`
		Interval string `json:"interval,omitempty" config:"interval"`
	} `json:"refresh,omitempty" config:"refresh"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	if len(in.Modules) != 0 {
		const prefix string = ",\"module\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v68, v69 := range in.Modules {
				if v68 > 0 {
					out.RawByte(',')
				}
				out.String(string(v69))
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode18(out, in.Refresh)
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode18(in *jlexer.Lexer, out *struct {
	Enabled  bool   `json:"enabled,omitempty" config:"enabled"`
	Interval string `json:"interval,omitempty" config:"interval"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = bool(in.Bool())
		case "interval":
			out.Interval = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode18(out *jwriter.Writer, in struct {
	Enabled  bool   `json:"enabled,omitempty" config:"enabled"`
	Interval string `json:"interval,omitempty" config:"interval"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Enabled {
		const prefix string = ",\"enabled\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Enabled))
	}
	if in.Interval != "" {
		const prefix string = ",\"interval\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Interval))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode16(in *jlexer.Lexer, out *struct {
	MaxConnectionPerNode int `json:"max_connection_per_node,omitempty" config:"max_connection_per_node" elastic_mapping:"max_connection_per_node:{type:keyword}"`
	MaxWaitTimeInMs      int `json:"max_wait_time_in_ms,omitempty" config:"max_wait_time_in_ms" elastic_mapping:"max_wait_time_in_ms:{type:keyword}"`
	MaxBytesPerNode      int `json:"max_bytes_per_node,omitempty" config:"max_bytes_per_node" elastic_mapping:"max_bytes_per_node:{type:keyword}"`
	MaxQpsPerNode        int `json:"max_qps_per_node,omitempty" config:"max_qps_per_node" elastic_mapping:"max_qps_per_node:{type:keyword}"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "max_connection_per_node":
			out.MaxConnectionPerNode = int(in.Int())
		case "max_wait_time_in_ms":
			out.MaxWaitTimeInMs = int(in.Int())
		case "max_bytes_per_node":
			out.MaxBytesPerNode = int(in.Int())
		case "max_qps_per_node":
			out.MaxQpsPerNode = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode16(out *jwriter.Writer, in struct {
	MaxConnectionPerNode int `json:"max_connection_per_node,omitempty" config:"max_connection_per_node" elastic_mapping:"max_connection_per_node:{type:keyword}"`
	MaxWaitTimeInMs      int `json:"max_wait_time_in_ms,omitempty" config:"max_wait_time_in_ms" elastic_mapping:"max_wait_time_in_ms:{type:keyword}"`
	MaxBytesPerNode      int `json:"max_bytes_per_node,omitempty" config:"max_bytes_per_node" elastic_mapping:"max_bytes_per_node:{type:keyword}"`
	MaxQpsPerNode        int `json:"max_qps_per_node,omitempty" config:"max_qps_per_node" elastic_mapping:"max_qps_per_node:{type:keyword}"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MaxConnectionPerNode != 0 {
		const prefix string = ",\"max_connection_per_node\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.MaxConnectionPerNode))
	}
	if in.MaxWaitTimeInMs != 0 {
		const prefix string = ",\"max_wait_time_in_ms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxWaitTimeInMs))
	}
	if in.MaxBytesPerNode != 0 {
		const prefix string = ",\"max_bytes_per_node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxBytesPerNode))
	}
	if in.MaxQpsPerNode != 0 {
		const prefix string = ",\"max_qps_per_node\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaxQpsPerNode))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecode15(in *jlexer.Lexer, out *struct {
	Username string `json:"username,omitempty" config:"username" elastic_mapping:"username:{type:keyword}"`
	Password string `json:"password,omitempty" config:"password" elastic_mapping:"password:{type:keyword}"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncode15(out *jwriter.Writer, in struct {
	Username string `json:"username,omitempty" config:"username" elastic_mapping:"username:{type:keyword}"`
	Password string `json:"password,omitempty" config:"password" elastic_mapping:"password:{type:keyword}"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Username != "" {
		const prefix string = ",\"username\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Username))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic14(in *jlexer.Lexer, out *DeleteByQueryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "deleted":
			out.Deleted = int64(in.Int64())
		case "total":
			out.Total = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic14(out *jwriter.Writer, in DeleteByQueryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"deleted\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Deleted))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int64(int64(in.Total))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteByQueryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteByQueryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteByQueryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteByQueryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic14(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic15(in *jlexer.Lexer, out *CatIndexResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "health":
			out.Health = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "uuid":
			out.Uuid = string(in.String())
		case "pri":
			out.Pri = string(in.String())
		case "rep":
			out.Rep = string(in.String())
		case "docs.count":
			out.DocsCount = string(in.String())
		case "docs.deleted":
			out.DocsDeleted = string(in.String())
		case "store.size":
			out.StoreSize = string(in.String())
		case "pri.store.size":
			out.PriStoreSize = string(in.String())
		case "segments.count":
			out.SegmentCount = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic15(out *jwriter.Writer, in CatIndexResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Health != "" {
		const prefix string = ",\"health\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Health))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	if in.Uuid != "" {
		const prefix string = ",\"uuid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Uuid))
	}
	if in.Pri != "" {
		const prefix string = ",\"pri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pri))
	}
	if in.Rep != "" {
		const prefix string = ",\"rep\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Rep))
	}
	if in.DocsCount != "" {
		const prefix string = ",\"docs.count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DocsCount))
	}
	if in.DocsDeleted != "" {
		const prefix string = ",\"docs.deleted\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DocsDeleted))
	}
	if in.StoreSize != "" {
		const prefix string = ",\"store.size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StoreSize))
	}
	if in.PriStoreSize != "" {
		const prefix string = ",\"pri.store.size\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PriStoreSize))
	}
	if in.SegmentCount != "" {
		const prefix string = ",\"segments.count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SegmentCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CatIndexResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CatIndexResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CatIndexResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CatIndexResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic15(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic16(in *jlexer.Lexer, out *BulkResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "took":
			out.Took = int(in.Int())
		case "errors":
			out.Errors = bool(in.Bool())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]BulkActionMetadata, 0, 2)
					} else {
						out.Items = []BulkActionMetadata{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v70 BulkActionMetadata
					(v70).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic16(out *jwriter.Writer, in BulkResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"took\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Took))
	}
	{
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		out.Bool(bool(in.Errors))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.Items {
				if v71 > 0 {
					out.RawByte(',')
				}
				(v72).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic16(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic17(in *jlexer.Lexer, out *BulkIndexMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_index":
			out.Index = string(in.String())
		case "_type":
			out.Type = string(in.String())
		case "_id":
			out.ID = string(in.String())
		case "pipeline":
			out.Pipeline = string(in.String())
		case "refresh":
			out.Refresh = string(in.String())
		case "_source":
			if m, ok := out.Source.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Source.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Source = in.Interface()
			}
		case "_source_excludes":
			if m, ok := out.SourceExcludes.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SourceExcludes.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SourceExcludes = in.Interface()
			}
		case "_source_includes":
			if m, ok := out.SourceIncludes.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SourceIncludes.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SourceIncludes = in.Interface()
			}
		case "retry_on_conflict":
			if m, ok := out.RetryOnConflict.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.RetryOnConflict.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.RetryOnConflict = in.Interface()
			}
		case "require_alias":
			if m, ok := out.RequireAlias.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.RequireAlias.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.RequireAlias = in.Interface()
			}
		case "_parent":
			if m, ok := out.Parent1.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Parent1.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Parent1 = in.Interface()
			}
		case "parent":
			if m, ok := out.Parent2.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Parent2.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Parent2 = in.Interface()
			}
		case "routing":
			if m, ok := out.Routing1.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Routing1.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Routing1 = in.Interface()
			}
		case "_routing":
			if m, ok := out.Routing2.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Routing2.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Routing2 = in.Interface()
			}
		case "_version":
			if m, ok := out.Version1.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Version1.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Version1 = in.Interface()
			}
		case "version":
			if m, ok := out.Version2.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Version2.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Version2 = in.Interface()
			}
		case "result":
			out.Result = string(in.String())
		case "_seq_no":
			out.SeqNo = int64(in.Int64())
		case "_primary_term":
			out.PrimaryTerm = int64(in.Int64())
		case "_shards":
			if in.IsNull() {
				in.Skip()
				out.Shards = nil
			} else {
				if out.Shards == nil {
					out.Shards = new(struct{})
				}
				easyjson3e1fa5ecDecode3(in, out.Shards)
			}
		case "status":
			out.Status = int(in.Int())
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(struct {
						Type   string `json:"type,omitempty"`
						Reason string `json:"reason,omitempty"`
					})
				}
				easyjson3e1fa5ecDecode9(in, out.Error)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic17(out *jwriter.Writer, in BulkIndexMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != "" {
		const prefix string = ",\"_index\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Index))
	}
	if in.Type != "" {
		const prefix string = ",\"_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.ID != "" {
		const prefix string = ",\"_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	if in.Pipeline != "" {
		const prefix string = ",\"pipeline\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Pipeline))
	}
	if in.Refresh != "" {
		const prefix string = ",\"refresh\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Refresh))
	}
	if in.Source != nil {
		const prefix string = ",\"_source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Source.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Source.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Source))
		}
	}
	if in.SourceExcludes != nil {
		const prefix string = ",\"_source_excludes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.SourceExcludes.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SourceExcludes.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SourceExcludes))
		}
	}
	if in.SourceIncludes != nil {
		const prefix string = ",\"_source_includes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.SourceIncludes.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SourceIncludes.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SourceIncludes))
		}
	}
	if in.RetryOnConflict != nil {
		const prefix string = ",\"retry_on_conflict\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.RetryOnConflict.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.RetryOnConflict.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.RetryOnConflict))
		}
	}
	if in.RequireAlias != nil {
		const prefix string = ",\"require_alias\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.RequireAlias.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.RequireAlias.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.RequireAlias))
		}
	}
	if in.Parent1 != nil {
		const prefix string = ",\"_parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Parent1.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Parent1.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Parent1))
		}
	}
	if in.Parent2 != nil {
		const prefix string = ",\"parent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Parent2.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Parent2.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Parent2))
		}
	}
	if in.Routing1 != nil {
		const prefix string = ",\"routing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Routing1.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Routing1.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Routing1))
		}
	}
	if in.Routing2 != nil {
		const prefix string = ",\"_routing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Routing2.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Routing2.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Routing2))
		}
	}
	if in.Version1 != nil {
		const prefix string = ",\"_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Version1.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Version1.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Version1))
		}
	}
	if in.Version2 != nil {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Version2.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Version2.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Version2))
		}
	}
	if in.Result != "" {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	if in.SeqNo != 0 {
		const prefix string = ",\"_seq_no\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.SeqNo))
	}
	if in.PrimaryTerm != 0 {
		const prefix string = ",\"_primary_term\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.PrimaryTerm))
	}
	if in.Shards != nil {
		const prefix string = ",\"_shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode3(out, *in.Shards)
	}
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3e1fa5ecEncode9(out, *in.Error)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkIndexMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkIndexMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkIndexMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkIndexMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic17(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic18(in *jlexer.Lexer, out *BulkActionMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				if out.Index == nil {
					out.Index = new(BulkIndexMetadata)
				}
				(*out.Index).UnmarshalEasyJSON(in)
			}
		case "delete":
			if in.IsNull() {
				in.Skip()
				out.Delete = nil
			} else {
				if out.Delete == nil {
					out.Delete = new(BulkIndexMetadata)
				}
				(*out.Delete).UnmarshalEasyJSON(in)
			}
		case "create":
			if in.IsNull() {
				in.Skip()
				out.Create = nil
			} else {
				if out.Create == nil {
					out.Create = new(BulkIndexMetadata)
				}
				(*out.Create).UnmarshalEasyJSON(in)
			}
		case "update":
			if in.IsNull() {
				in.Skip()
				out.Update = nil
			} else {
				if out.Update == nil {
					out.Update = new(BulkIndexMetadata)
				}
				(*out.Update).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic18(out *jwriter.Writer, in BulkActionMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Index != nil {
		const prefix string = ",\"index\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Index).MarshalEasyJSON(out)
	}
	if in.Delete != nil {
		const prefix string = ",\"delete\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Delete).MarshalEasyJSON(out)
	}
	if in.Create != nil {
		const prefix string = ",\"create\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Create).MarshalEasyJSON(out)
	}
	if in.Update != nil {
		const prefix string = ",\"update\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Update).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BulkActionMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BulkActionMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BulkActionMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BulkActionMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic18(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic19(in *jlexer.Lexer, out *AliasInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alias":
			out.Alias = string(in.String())
		case "index":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				in.Delim('[')
				if out.Index == nil {
					if !in.IsDelim(']') {
						out.Index = make([]string, 0, 4)
					} else {
						out.Index = []string{}
					}
				} else {
					out.Index = (out.Index)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.Index = append(out.Index, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "write_index":
			out.WriteIndex = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic19(out *jwriter.Writer, in AliasInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Alias))
	}
	if len(in.Index) != 0 {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.Index {
				if v74 > 0 {
					out.RawByte(',')
				}
				out.String(string(v75))
			}
			out.RawByte(']')
		}
	}
	if in.WriteIndex != "" {
		const prefix string = ",\"write_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WriteIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AliasInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AliasInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AliasInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AliasInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic19(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic20(in *jlexer.Lexer, out *AliasIndex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = string(in.String())
		case "filter":
			if m, ok := out.Filter.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Filter.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Filter = in.Interface()
			}
		case "index_routing":
			out.IndexRouting = string(in.String())
		case "search_routing":
			out.SearchRouting = string(in.String())
		case "is_hidden":
			out.IsHidden = bool(in.Bool())
		case "is_write_index":
			out.IsWriteIndex = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic20(out *jwriter.Writer, in AliasIndex) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix[1:])
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"filter\":"
		out.RawString(prefix)
		if m, ok := in.Filter.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Filter.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Filter))
		}
	}
	{
		const prefix string = ",\"index_routing\":"
		out.RawString(prefix)
		out.String(string(in.IndexRouting))
	}
	{
		const prefix string = ",\"search_routing\":"
		out.RawString(prefix)
		out.String(string(in.SearchRouting))
	}
	{
		const prefix string = ",\"is_hidden\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHidden))
	}
	{
		const prefix string = ",\"is_write_index\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsWriteIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AliasIndex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AliasIndex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AliasIndex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AliasIndex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic20(l, v)
}
func easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic21(in *jlexer.Lexer, out *AliasDetailInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alias":
			out.Alias = string(in.String())
		case "indexes":
			if in.IsNull() {
				in.Skip()
				out.Indexes = nil
			} else {
				in.Delim('[')
				if out.Indexes == nil {
					if !in.IsDelim(']') {
						out.Indexes = make([]AliasIndex, 0, 0)
					} else {
						out.Indexes = []AliasIndex{}
					}
				} else {
					out.Indexes = (out.Indexes)[:0]
				}
				for !in.IsDelim(']') {
					var v76 AliasIndex
					(v76).UnmarshalEasyJSON(in)
					out.Indexes = append(out.Indexes, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "write_index":
			out.WriteIndex = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic21(out *jwriter.Writer, in AliasDetailInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Alias != "" {
		const prefix string = ",\"alias\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Alias))
	}
	if len(in.Indexes) != 0 {
		const prefix string = ",\"indexes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v77, v78 := range in.Indexes {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.WriteIndex != "" {
		const prefix string = ",\"write_index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WriteIndex))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AliasDetailInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AliasDetailInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeInfiniShFrameworkCoreElastic21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AliasDetailInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AliasDetailInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeInfiniShFrameworkCoreElastic21(l, v)
}
