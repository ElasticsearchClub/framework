// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elastic

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic(in *jlexer.Lexer, out *ScrollResponseV7) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hits":
			easyjson7411bd3fDecode(in, &out.Hits)
		case "took":
			out.Took = int(in.Int())
		case "_scroll_id":
			out.ScrollId = string(in.String())
		case "timed_out":
			out.TimedOut = bool(in.Bool())
		case "_shards":
			easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic1(in, &out.Shards)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic(out *jwriter.Writer, in ScrollResponseV7) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7411bd3fEncode(out, in.Hits)
	}
	if in.Took != 0 {
		const prefix string = ",\"took\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Took))
	}
	if in.ScrollId != "" {
		const prefix string = ",\"_scroll_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScrollId))
	}
	if in.TimedOut {
		const prefix string = ",\"timed_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TimedOut))
	}
	if true {
		const prefix string = ",\"_shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic1(out, in.Shards)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScrollResponseV7) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScrollResponseV7) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScrollResponseV7) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScrollResponseV7) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic(l, v)
}
func easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic1(in *jlexer.Lexer, out *ShardResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int(in.Int())
		case "successful":
			out.Successful = int(in.Int())
		case "skipped":
			out.Skipped = int(in.Int())
		case "failed":
			out.Failed = int(in.Int())
		case "failures":
			if in.IsNull() {
				in.Skip()
				out.Failures = nil
			} else {
				in.Delim('[')
				if out.Failures == nil {
					if !in.IsDelim(']') {
						out.Failures = make([]struct {
							Shard  int             `json:"shard,omitempty"`
							Index  string          `json:"index,omitempty,nocopy,intern"`
							Status int             `json:"status,omitempty"`
							Reason json.RawMessage `json:"reason,omitempty,nocopy"`
						}, 0, 1)
					} else {
						out.Failures = []struct {
							Shard  int             `json:"shard,omitempty"`
							Index  string          `json:"index,omitempty,nocopy,intern"`
							Status int             `json:"status,omitempty"`
							Reason json.RawMessage `json:"reason,omitempty,nocopy"`
						}{}
					}
				} else {
					out.Failures = (out.Failures)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Shard  int             `json:"shard,omitempty"`
						Index  string          `json:"index,omitempty,nocopy,intern"`
						Status int             `json:"status,omitempty"`
						Reason json.RawMessage `json:"reason,omitempty,nocopy"`
					}
					easyjson7411bd3fDecode1(in, &v1)
					out.Failures = append(out.Failures, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic1(out *jwriter.Writer, in ShardResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Total))
	}
	if in.Successful != 0 {
		const prefix string = ",\"successful\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Successful))
	}
	if in.Skipped != 0 {
		const prefix string = ",\"skipped\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Skipped))
	}
	if in.Failed != 0 {
		const prefix string = ",\"failed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Failed))
	}
	if len(in.Failures) != 0 {
		const prefix string = ",\"failures\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.Failures {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson7411bd3fEncode1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7411bd3fDecode1(in *jlexer.Lexer, out *struct {
	Shard  int             `json:"shard,omitempty"`
	Index  string          `json:"index,omitempty,nocopy,intern"`
	Status int             `json:"status,omitempty"`
	Reason json.RawMessage `json:"reason,omitempty,nocopy"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shard":
			out.Shard = int(in.Int())
		case "index":
			out.Index = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "reason":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Reason).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7411bd3fEncode1(out *jwriter.Writer, in struct {
	Shard  int             `json:"shard,omitempty"`
	Index  string          `json:"index,omitempty,nocopy,intern"`
	Status int             `json:"status,omitempty"`
	Reason json.RawMessage `json:"reason,omitempty,nocopy"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Shard != 0 {
		const prefix string = ",\"shard\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Shard))
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	if in.Status != 0 {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	if len(in.Reason) != 0 {
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Reason).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson7411bd3fDecode(in *jlexer.Lexer, out *struct {
	MaxScore float32 `json:"max_score,omitempty"`
	Total    struct {
		Value    int64  `json:"value,omitempty"`
		Relation string `json:"relation,omitempty"`
	} `json:"total,omitempty"`
	Docs []json.RawMessage `json:"hits,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "max_score":
			out.MaxScore = float32(in.Float32())
		case "total":
			easyjson7411bd3fDecode2(in, &out.Total)
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Docs = nil
			} else {
				in.Delim('[')
				if out.Docs == nil {
					if !in.IsDelim(']') {
						out.Docs = make([]json.RawMessage, 0, 2)
					} else {
						out.Docs = []json.RawMessage{}
					}
				} else {
					out.Docs = (out.Docs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 json.RawMessage
					if data := in.Raw(); in.Ok() {
						in.AddError((v4).UnmarshalJSON(data))
					}
					out.Docs = append(out.Docs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7411bd3fEncode(out *jwriter.Writer, in struct {
	MaxScore float32 `json:"max_score,omitempty"`
	Total    struct {
		Value    int64  `json:"value,omitempty"`
		Relation string `json:"relation,omitempty"`
	} `json:"total,omitempty"`
	Docs []json.RawMessage `json:"hits,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MaxScore != 0 {
		const prefix string = ",\"max_score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.MaxScore))
	}
	if true {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7411bd3fEncode2(out, in.Total)
	}
	if len(in.Docs) != 0 {
		const prefix string = ",\"hits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Docs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Raw((v6).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson7411bd3fDecode2(in *jlexer.Lexer, out *struct {
	Value    int64  `json:"value,omitempty"`
	Relation string `json:"relation,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = int64(in.Int64())
		case "relation":
			out.Relation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7411bd3fEncode2(out *jwriter.Writer, in struct {
	Value    int64  `json:"value,omitempty"`
	Relation string `json:"relation,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Value))
	}
	if in.Relation != "" {
		const prefix string = ",\"relation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Relation))
	}
	out.RawByte('}')
}
func easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic2(in *jlexer.Lexer, out *ScrollResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "took":
			out.Took = int(in.Int())
		case "_scroll_id":
			out.ScrollId = string(in.String())
		case "timed_out":
			out.TimedOut = bool(in.Bool())
		case "hits":
			easyjson7411bd3fDecode3(in, &out.Hits)
		case "_shards":
			easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic1(in, &out.Shards)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic2(out *jwriter.Writer, in ScrollResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Took != 0 {
		const prefix string = ",\"took\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Took))
	}
	if in.ScrollId != "" {
		const prefix string = ",\"_scroll_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ScrollId))
	}
	if in.TimedOut {
		const prefix string = ",\"timed_out\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.TimedOut))
	}
	{
		const prefix string = ",\"hits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7411bd3fEncode3(out, in.Hits)
	}
	if true {
		const prefix string = ",\"_shards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic1(out, in.Shards)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScrollResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScrollResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7411bd3fEncodeInfiniShFrameworkCoreElastic2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScrollResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScrollResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7411bd3fDecodeInfiniShFrameworkCoreElastic2(l, v)
}
func easyjson7411bd3fDecode3(in *jlexer.Lexer, out *struct {
	MaxScore float32           `json:"max_score,omitempty"`
	Total    int64             `json:"total,omitempty"`
	Docs     []json.RawMessage `json:"hits,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "max_score":
			out.MaxScore = float32(in.Float32())
		case "total":
			out.Total = int64(in.Int64())
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Docs = nil
			} else {
				in.Delim('[')
				if out.Docs == nil {
					if !in.IsDelim(']') {
						out.Docs = make([]json.RawMessage, 0, 2)
					} else {
						out.Docs = []json.RawMessage{}
					}
				} else {
					out.Docs = (out.Docs)[:0]
				}
				for !in.IsDelim(']') {
					var v7 json.RawMessage
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Docs = append(out.Docs, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7411bd3fEncode3(out *jwriter.Writer, in struct {
	MaxScore float32           `json:"max_score,omitempty"`
	Total    int64             `json:"total,omitempty"`
	Docs     []json.RawMessage `json:"hits,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MaxScore != 0 {
		const prefix string = ",\"max_score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.MaxScore))
	}
	if in.Total != 0 {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Total))
	}
	if len(in.Docs) != 0 {
		const prefix string = ",\"hits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Docs {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Raw((v9).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
